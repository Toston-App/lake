services:
  db:
    image: postgres:16
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    labels:
      # This means the container will be stopped during backup to ensure backup integrity.
      - docker-volume-backup.stop-during-backup=true

  backup:
    image: offen/docker-volume-backup:latest
    restart: always
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      # Enable notification settings from environment variables
      - NOTIFICATION_URLS=${TELEGRAM_NOTIFICATION_URL:-}
      - NOTIFICATION_LEVEL=${BACKUP_NOTIFICATION_LEVEL:-error}
    volumes:
      - postgres_data:/backup/postgres:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Local path to store the backup archives
      # - ${BACKUP_ARCHIVE_PATH:-./backups}:/archive

  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5050:5050"
    depends_on:
      - db
    env_file:
      - .env
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    environment:
      - PG_USERNAME=${PG_USERNAME}
      - PG_HASHED_PASSWORD=${PG_HASHED_PASSWORD}
      - PGADMIN_CONFIG_X_CONTENT_TYPE_OPTIONS=${PGADMIN_CONFIG_X_CONTENT_TYPE_OPTIONS:-""}
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=${PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION:-True}
      - PGADMIN_CONFIG_X_XSS_PROTECTION=${PGADMIN_CONFIG_X_XSS_PROTECTION:-1}
    #labels:
    # Basic auth for pgadmin using the environment variables PG_USERNAME and PG_HASHED_PASSWORD
    # - traefik.http.middlewares.mybasicauth.basicauth.users=${PG_USERNAME}:${PG_HASHED_PASSWORD}

  prestart:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
    build:
      context: ./backend
      dockerfile: backend.dockerfile
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    command: bash scripts/prestart.sh
    env_file:
      - .env

  backend:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
    restart: always
    depends_on:
      db:
        condition: service_healthy
      prestart:
        condition: service_completed_successfully
    env_file:
      - .env
    build:
      context: ./backend
      dockerfile: backend.dockerfile

  # Alternative to whatsapp, uncomment to use
  # waha:
  #   restart: always
  #   # in macos change to waha:arm
  #   image: devlikeapro/waha:latest-2025.7.9
  #   ports:
  #     - "127.0.0.1:3000:3000/tcp"
  #   depends_on:
  #     - backend
  #   env_file:
  #     - .env

  # # used to expose the waha service to the internet
  # cloudflaretunnel:
  #   image: cloudflare/cloudflared:latest
  #   restart: always
  #   depends_on:
  #     - waha
  #   environment:
  #     - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
  #   command: tunnel --no-autoupdate run --url http://waha:3000

volumes:
  postgres_data:
  pgadmin-data:
